[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "turtle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "turtle",
        "description": "turtle",
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "create_board",
        "kind": 2,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "def create_board():\n    board = np.zeros((ROW_COUNT,COLUMN_COUNT))\n    return board\ndef drop_piece(board, row, col, piece):\n    board[row][col] = piece\ndef is_valid_location(board,col):\n    return board[ROW_COUNT - 1][col] == 0\ndef get_next_open_row(board,col):\n    for r in range(ROW_COUNT):\n        if board[r][col] == 0:",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "drop_piece",
        "kind": 2,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "def drop_piece(board, row, col, piece):\n    board[row][col] = piece\ndef is_valid_location(board,col):\n    return board[ROW_COUNT - 1][col] == 0\ndef get_next_open_row(board,col):\n    for r in range(ROW_COUNT):\n        if board[r][col] == 0:\n            return r\ndef print_board(board):\n    print(np.flip(board, 0))",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "is_valid_location",
        "kind": 2,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "def is_valid_location(board,col):\n    return board[ROW_COUNT - 1][col] == 0\ndef get_next_open_row(board,col):\n    for r in range(ROW_COUNT):\n        if board[r][col] == 0:\n            return r\ndef print_board(board):\n    print(np.flip(board, 0))\ndef winning_move(board, piece):\n    for c in range(COLUMN_COUNT - 3 ):",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "get_next_open_row",
        "kind": 2,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "def get_next_open_row(board,col):\n    for r in range(ROW_COUNT):\n        if board[r][col] == 0:\n            return r\ndef print_board(board):\n    print(np.flip(board, 0))\ndef winning_move(board, piece):\n    for c in range(COLUMN_COUNT - 3 ):\n        for r in range(ROW_COUNT):\n            if board[r][c] == piece and board[r][c+1] == piece and board[r][c+2] == piece and board[r][c+3] == piece :",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "print_board",
        "kind": 2,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "def print_board(board):\n    print(np.flip(board, 0))\ndef winning_move(board, piece):\n    for c in range(COLUMN_COUNT - 3 ):\n        for r in range(ROW_COUNT):\n            if board[r][c] == piece and board[r][c+1] == piece and board[r][c+2] == piece and board[r][c+3] == piece :\n                return True\n    for c in range(COLUMN_COUNT ):\n        for r in range(ROW_COUNT - 3):\n            if board[r][c] == piece and board[r+1][c] == piece and board[r+2][c] == piece and board[r+3][c] == piece :",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "winning_move",
        "kind": 2,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "def winning_move(board, piece):\n    for c in range(COLUMN_COUNT - 3 ):\n        for r in range(ROW_COUNT):\n            if board[r][c] == piece and board[r][c+1] == piece and board[r][c+2] == piece and board[r][c+3] == piece :\n                return True\n    for c in range(COLUMN_COUNT ):\n        for r in range(ROW_COUNT - 3):\n            if board[r][c] == piece and board[r+1][c] == piece and board[r+2][c] == piece and board[r+3][c] == piece :\n                return True\n    for c in range(COLUMN_COUNT - 3):",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "draw_board",
        "kind": 2,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "def draw_board(board):\n\tpygame.display.update()\n\tfor c in range(COLUMN_COUNT):\n\t\tfor r in range(ROW_COUNT):\n\t\t\tpygame.draw.rect(screen, BLUE, (c*SQUARE_SIZE, r*SQUARE_SIZE+SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE))\n\t\t\tpygame.draw.circle(screen, BLACK, (int(c*SQUARE_SIZE+SQUARE_SIZE/2), int(r*SQUARE_SIZE+SQUARE_SIZE+SQUARE_SIZE/2)), RADIUS)\t\t\n\tfor c in range(COLUMN_COUNT):\n\t\tfor r in range(ROW_COUNT):\n\t\t\tif board[r][c] == 1:\n\t\t\t\tpygame.draw.circle(screen, RED, (int(c*SQUARE_SIZE+SQUARE_SIZE/2), height - int(r*SQUARE_SIZE+SQUARE_SIZE/2)), RADIUS)",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "connect4",
        "kind": 2,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "def connect4():\n    board = create_board()\n    print_board(board)    \n    draw_board(board)\n    game_over = False\n    myfont = pygame.font.SysFont(\"monospace\", 75)\n    turn = 0 \n    while not game_over:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "ROW_COUNT",
        "kind": 5,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "ROW_COUNT = 6\nCOLUMN_COUNT = 7\nBLUE = (0,0,255)\nBLACK = (0,0,0)\nRED = (255,0,0)\nYELLOW = (255,255,0)\nSQUARE_SIZE = 100\nRADIUS = int(SQUARE_SIZE/2 - 5)\nwidth = COLUMN_COUNT * SQUARE_SIZE\nheight = (ROW_COUNT + 1) * SQUARE_SIZE",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "COLUMN_COUNT",
        "kind": 5,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "COLUMN_COUNT = 7\nBLUE = (0,0,255)\nBLACK = (0,0,0)\nRED = (255,0,0)\nYELLOW = (255,255,0)\nSQUARE_SIZE = 100\nRADIUS = int(SQUARE_SIZE/2 - 5)\nwidth = COLUMN_COUNT * SQUARE_SIZE\nheight = (ROW_COUNT + 1) * SQUARE_SIZE\nsize = (width, height)",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "BLUE",
        "kind": 5,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "BLUE = (0,0,255)\nBLACK = (0,0,0)\nRED = (255,0,0)\nYELLOW = (255,255,0)\nSQUARE_SIZE = 100\nRADIUS = int(SQUARE_SIZE/2 - 5)\nwidth = COLUMN_COUNT * SQUARE_SIZE\nheight = (ROW_COUNT + 1) * SQUARE_SIZE\nsize = (width, height)\npygame.init()",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "BLACK = (0,0,0)\nRED = (255,0,0)\nYELLOW = (255,255,0)\nSQUARE_SIZE = 100\nRADIUS = int(SQUARE_SIZE/2 - 5)\nwidth = COLUMN_COUNT * SQUARE_SIZE\nheight = (ROW_COUNT + 1) * SQUARE_SIZE\nsize = (width, height)\npygame.init()\nscreen = pygame.display.set_mode(size)",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "RED = (255,0,0)\nYELLOW = (255,255,0)\nSQUARE_SIZE = 100\nRADIUS = int(SQUARE_SIZE/2 - 5)\nwidth = COLUMN_COUNT * SQUARE_SIZE\nheight = (ROW_COUNT + 1) * SQUARE_SIZE\nsize = (width, height)\npygame.init()\nscreen = pygame.display.set_mode(size)\ndef create_board():",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "YELLOW",
        "kind": 5,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "YELLOW = (255,255,0)\nSQUARE_SIZE = 100\nRADIUS = int(SQUARE_SIZE/2 - 5)\nwidth = COLUMN_COUNT * SQUARE_SIZE\nheight = (ROW_COUNT + 1) * SQUARE_SIZE\nsize = (width, height)\npygame.init()\nscreen = pygame.display.set_mode(size)\ndef create_board():\n    board = np.zeros((ROW_COUNT,COLUMN_COUNT))",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "SQUARE_SIZE",
        "kind": 5,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "SQUARE_SIZE = 100\nRADIUS = int(SQUARE_SIZE/2 - 5)\nwidth = COLUMN_COUNT * SQUARE_SIZE\nheight = (ROW_COUNT + 1) * SQUARE_SIZE\nsize = (width, height)\npygame.init()\nscreen = pygame.display.set_mode(size)\ndef create_board():\n    board = np.zeros((ROW_COUNT,COLUMN_COUNT))\n    return board",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "RADIUS",
        "kind": 5,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "RADIUS = int(SQUARE_SIZE/2 - 5)\nwidth = COLUMN_COUNT * SQUARE_SIZE\nheight = (ROW_COUNT + 1) * SQUARE_SIZE\nsize = (width, height)\npygame.init()\nscreen = pygame.display.set_mode(size)\ndef create_board():\n    board = np.zeros((ROW_COUNT,COLUMN_COUNT))\n    return board\ndef drop_piece(board, row, col, piece):",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "width = COLUMN_COUNT * SQUARE_SIZE\nheight = (ROW_COUNT + 1) * SQUARE_SIZE\nsize = (width, height)\npygame.init()\nscreen = pygame.display.set_mode(size)\ndef create_board():\n    board = np.zeros((ROW_COUNT,COLUMN_COUNT))\n    return board\ndef drop_piece(board, row, col, piece):\n    board[row][col] = piece",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "height = (ROW_COUNT + 1) * SQUARE_SIZE\nsize = (width, height)\npygame.init()\nscreen = pygame.display.set_mode(size)\ndef create_board():\n    board = np.zeros((ROW_COUNT,COLUMN_COUNT))\n    return board\ndef drop_piece(board, row, col, piece):\n    board[row][col] = piece\ndef is_valid_location(board,col):",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "size",
        "kind": 5,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "size = (width, height)\npygame.init()\nscreen = pygame.display.set_mode(size)\ndef create_board():\n    board = np.zeros((ROW_COUNT,COLUMN_COUNT))\n    return board\ndef drop_piece(board, row, col, piece):\n    board[row][col] = piece\ndef is_valid_location(board,col):\n    return board[ROW_COUNT - 1][col] == 0",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "connect4",
        "description": "connect4",
        "peekOfCode": "screen = pygame.display.set_mode(size)\ndef create_board():\n    board = np.zeros((ROW_COUNT,COLUMN_COUNT))\n    return board\ndef drop_piece(board, row, col, piece):\n    board[row][col] = piece\ndef is_valid_location(board,col):\n    return board[ROW_COUNT - 1][col] == 0\ndef get_next_open_row(board,col):\n    for r in range(ROW_COUNT):",
        "detail": "connect4",
        "documentation": {}
    },
    {
        "label": "paddle_a_up",
        "kind": 2,
        "importPath": "pong1",
        "description": "pong1",
        "peekOfCode": "def paddle_a_up():\n    y = paddle_a.ycor()\n    y += 20\n    if y < 280:\n        paddle_a.sety(y)\ndef paddle_a_down():\n    y = paddle_a.ycor()\n    y -= 20\n    if y > -280:\n        paddle_a.sety(y)",
        "detail": "pong1",
        "documentation": {}
    },
    {
        "label": "paddle_a_down",
        "kind": 2,
        "importPath": "pong1",
        "description": "pong1",
        "peekOfCode": "def paddle_a_down():\n    y = paddle_a.ycor()\n    y -= 20\n    if y > -280:\n        paddle_a.sety(y)\ndef paddle_b_up():\n    y = paddle_b.ycor()\n    y += 20\n    if y < 280:\n        paddle_b.sety(y)",
        "detail": "pong1",
        "documentation": {}
    },
    {
        "label": "paddle_b_up",
        "kind": 2,
        "importPath": "pong1",
        "description": "pong1",
        "peekOfCode": "def paddle_b_up():\n    y = paddle_b.ycor()\n    y += 20\n    if y < 280:\n        paddle_b.sety(y)\ndef paddle_b_down():\n    y = paddle_b.ycor()\n    y -= 20\n    if y > -280:\n        paddle_b.sety(y)",
        "detail": "pong1",
        "documentation": {}
    },
    {
        "label": "paddle_b_down",
        "kind": 2,
        "importPath": "pong1",
        "description": "pong1",
        "peekOfCode": "def paddle_b_down():\n    y = paddle_b.ycor()\n    y -= 20\n    if y > -280:\n        paddle_b.sety(y)\n## Keyboard Bindings (\nwn.listen()\nwn.onkeypress(paddle_a_up, \"w\")\nwn.onkeypress(paddle_a_down, \"s\")\nwn.onkeypress(paddle_b_up, \"Up\")",
        "detail": "pong1",
        "documentation": {}
    },
    {
        "label": "pong",
        "kind": 2,
        "importPath": "pong1",
        "description": "pong1",
        "peekOfCode": "def pong():\n    global scoreA, scoreB\n    counter = turtle.Turtle()\n    counter.speed()\n    counter.color(\"white\")\n    counter.penup()\n    counter.hideturtle()\n    counter.goto(0,0)\n    for i in range(3):\n        counter.write(3 - i,align=\"center\", font=(\"Courier\", 48, \"normal\") )",
        "detail": "pong1",
        "documentation": {}
    },
    {
        "label": "wn",
        "kind": 5,
        "importPath": "pong1",
        "description": "pong1",
        "peekOfCode": "wn = turtle.Screen()\nwn.title(\"Pong\")\nwn.bgcolor(\"black\")\nwn.setup(width=800, height=600)\nwn.tracer(0) # stops the window from updating ... helps running game faster\n# Score\nscoreA = 0\nscoreB = 0\n# paddle A\npaddle_a = turtle.Turtle()",
        "detail": "pong1",
        "documentation": {}
    },
    {
        "label": "scoreA",
        "kind": 5,
        "importPath": "pong1",
        "description": "pong1",
        "peekOfCode": "scoreA = 0\nscoreB = 0\n# paddle A\npaddle_a = turtle.Turtle()\npaddle_a.speed(0)\npaddle_a.shape(\"square\")\npaddle_a.color(\"white\")\npaddle_a.shapesize(stretch_wid=5,stretch_len=1)\npaddle_a.penup()\npaddle_a.goto(-350,0)",
        "detail": "pong1",
        "documentation": {}
    },
    {
        "label": "scoreB",
        "kind": 5,
        "importPath": "pong1",
        "description": "pong1",
        "peekOfCode": "scoreB = 0\n# paddle A\npaddle_a = turtle.Turtle()\npaddle_a.speed(0)\npaddle_a.shape(\"square\")\npaddle_a.color(\"white\")\npaddle_a.shapesize(stretch_wid=5,stretch_len=1)\npaddle_a.penup()\npaddle_a.goto(-350,0)\n# paddle B",
        "detail": "pong1",
        "documentation": {}
    },
    {
        "label": "paddle_a",
        "kind": 5,
        "importPath": "pong1",
        "description": "pong1",
        "peekOfCode": "paddle_a = turtle.Turtle()\npaddle_a.speed(0)\npaddle_a.shape(\"square\")\npaddle_a.color(\"white\")\npaddle_a.shapesize(stretch_wid=5,stretch_len=1)\npaddle_a.penup()\npaddle_a.goto(-350,0)\n# paddle B\npaddle_b = turtle.Turtle()\npaddle_b.speed(0)",
        "detail": "pong1",
        "documentation": {}
    },
    {
        "label": "paddle_b",
        "kind": 5,
        "importPath": "pong1",
        "description": "pong1",
        "peekOfCode": "paddle_b = turtle.Turtle()\npaddle_b.speed(0)\npaddle_b.shape(\"square\")\npaddle_b.color(\"white\")\npaddle_b.shapesize(stretch_wid=5,stretch_len=1)\npaddle_b.penup()\npaddle_b.goto(350,0)\n# Ball\nball = turtle.Turtle()\nball.speed(0)",
        "detail": "pong1",
        "documentation": {}
    },
    {
        "label": "ball",
        "kind": 5,
        "importPath": "pong1",
        "description": "pong1",
        "peekOfCode": "ball = turtle.Turtle()\nball.speed(0)\nball.shape(\"square\")\nball.color(\"white\")\nball.penup()\nball.goto(0,0)\nball.dx = 1\nball.dy = 1\n# Pen\npen = turtle.Turtle()",
        "detail": "pong1",
        "documentation": {}
    },
    {
        "label": "ball.dx",
        "kind": 5,
        "importPath": "pong1",
        "description": "pong1",
        "peekOfCode": "ball.dx = 1\nball.dy = 1\n# Pen\npen = turtle.Turtle()\npen.speed(0)\npen.color(\"white\")\npen.penup()\npen.hideturtle()\npen.goto(0,260)\npen.write(f\"Player A: {scoreA} Player B: {scoreB}\", align=\"center\", font=(\"Courier\", 24, \"normal\"))",
        "detail": "pong1",
        "documentation": {}
    },
    {
        "label": "ball.dy",
        "kind": 5,
        "importPath": "pong1",
        "description": "pong1",
        "peekOfCode": "ball.dy = 1\n# Pen\npen = turtle.Turtle()\npen.speed(0)\npen.color(\"white\")\npen.penup()\npen.hideturtle()\npen.goto(0,260)\npen.write(f\"Player A: {scoreA} Player B: {scoreB}\", align=\"center\", font=(\"Courier\", 24, \"normal\"))\n## Functions ",
        "detail": "pong1",
        "documentation": {}
    },
    {
        "label": "pen",
        "kind": 5,
        "importPath": "pong1",
        "description": "pong1",
        "peekOfCode": "pen = turtle.Turtle()\npen.speed(0)\npen.color(\"white\")\npen.penup()\npen.hideturtle()\npen.goto(0,260)\npen.write(f\"Player A: {scoreA} Player B: {scoreB}\", align=\"center\", font=(\"Courier\", 24, \"normal\"))\n## Functions \ndef paddle_a_up():\n    y = paddle_a.ycor()",
        "detail": "pong1",
        "documentation": {}
    },
    {
        "label": "cube",
        "kind": 6,
        "importPath": "snake",
        "description": "snake",
        "peekOfCode": "class cube(object):\n    rows = 20\n    w = 500\n    def __init__(self,start,dirnx=1,dirny=0,color=(255,0,0)):\n        self.pos = start\n        self.dirnx = 1\n        self.dirny = 0\n        self.color = color\n    def move(self, dirnx, dirny):\n        self.dirnx = dirnx",
        "detail": "snake",
        "documentation": {}
    },
    {
        "label": "snake",
        "kind": 6,
        "importPath": "snake",
        "description": "snake",
        "peekOfCode": "class snake(object):\n    body = []\n    turns = {}\n    def __init__(self, color, pos):\n        self.color = color\n        self.head = cube(pos)\n        self.body.append(self.head)\n        self.dirnx = 0\n        self.dirny = 1\n    def move(self):",
        "detail": "snake",
        "documentation": {}
    },
    {
        "label": "drawGrid",
        "kind": 2,
        "importPath": "snake",
        "description": "snake",
        "peekOfCode": "def drawGrid(w, rows, surface):\n    sizeBtwn = w // rows\n    x = 0\n    y = 0\n    for l in range(rows):\n        x = x + sizeBtwn\n        y = y + sizeBtwn\n        pygame.draw.line(surface, (255,255,255), (x,0),(x,w))\n        pygame.draw.line(surface, (255,255,255), (0,y),(w,y))\ndef redrawWindow(surface):",
        "detail": "snake",
        "documentation": {}
    },
    {
        "label": "redrawWindow",
        "kind": 2,
        "importPath": "snake",
        "description": "snake",
        "peekOfCode": "def redrawWindow(surface):\n    global rows, width, s, snack\n    surface.fill((0,0,0))\n    s.draw(surface)\n    snack.draw(surface)\n    drawGrid(width,rows, surface)\n    pygame.display.update()\ndef randomSnack(rows, item):\n    positions = item.body\n    while True:",
        "detail": "snake",
        "documentation": {}
    },
    {
        "label": "randomSnack",
        "kind": 2,
        "importPath": "snake",
        "description": "snake",
        "peekOfCode": "def randomSnack(rows, item):\n    positions = item.body\n    while True:\n        x = random.randrange(rows)\n        y = random.randrange(rows)\n        if len(list(filter(lambda z:z.pos == (x,y), positions))) > 0:\n            continue\n        else:\n            break\n    return (x,y)",
        "detail": "snake",
        "documentation": {}
    },
    {
        "label": "message_box",
        "kind": 2,
        "importPath": "snake",
        "description": "snake",
        "peekOfCode": "def message_box(subject, content):\n    root = tk.Tk()\n    root.attributes(\"-topmost\", True)\n    root.withdraw()\n    messagebox.showinfo(subject, content)\n    try:\n        root.destroy()\n    except:\n        pass\ndef snakeGame():",
        "detail": "snake",
        "documentation": {}
    },
    {
        "label": "snakeGame",
        "kind": 2,
        "importPath": "snake",
        "description": "snake",
        "peekOfCode": "def snakeGame():\n    global width, rows, s, snack\n    width = 500\n    rows = 20\n    win = pygame.display.set_mode((width, width))\n    s = snake((255,0,0), (10,10))\n    snack = cube(randomSnack(rows, s), color=(0,255,0))\n    flag = True\n    clock = pygame.time.Clock()\n    while flag:",
        "detail": "snake",
        "documentation": {}
    }
]